#!/usr/bin/env zsh
# shellcheck shell=bash
OS=$(uname | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)
if [[ "$ARCH" == "x86_64" ]]; then
  ARCH="amd64"
fi

# start xorg
if [[ -t 0 && $(tty) == "/dev/tty1" && ! $DISPLAY ]]; then
  exec startx
fi

# brewPrefix is the path to where brew packages are installed.
# defaults to "". This should, generally, be carefully used as
# it won't work OOTB on Linux.
if [[ "$OS" == "darwin" ]] && ! command -v "brew" >/dev/null; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi
brewPrefix=$(brew --prefix 2>/dev/null || echo "")

# 1Password ssh-agent
export SSH_AUTH_SOCK="$HOME/.1password/agent.sock"

## WSL2 Support
# Check if we're running in WSL2
if [[ -f /proc/sys/fs/binfmt_misc/WSLInterop ]]; then
  if ! command -v npiperelay.exe >/dev/null; then
    echo "Please install npiperelay.exe from https://github.com/albertony/npiperelay"
    sleep 15
    exit 0
  fi

  # Configure ssh forwarding as per: https://1password.community/discussion/128023/ssh-agent-on-windows-subsystem-for-linux
  # need `ps -ww` to get non-truncated command for matching
  # use square brackets to generate a regex match for the process we want but that doesn't match the grep command running it!
  if ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent"; then
    # Ensure the directory exists
    if [[ ! -e "$HOME/.1password" ]]; then
      mkdir -p "$HOME/.1password"
    fi

    # If the SSH_AUTH_SOCK already exists, remove it because no forwarding command is running.
    if [[ -S $SSH_AUTH_SOCK ]]; then
      rm -f "$SSH_AUTH_SOCK"
    fi

    # setsid to force new session to keep running
    # set socat to listen on $SSH_AUTH_SOCK and forward to npiperelay which then forwards to openssh-ssh-agent on windows
    (setsid socat UNIX-LISTEN:"$SSH_AUTH_SOCK",fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
  fi
fi

# start tmux
export ZSH_TMUX_AUTOSTART=true

# fzf configuration
export FZF_DEFAULT_COMMAND=fd

# zplug
export ZPLUG_HOME="$brewPrefix/opt/zplug"
source "$ZPLUG_HOME/init.zsh"

zplug "zsh-users/zsh-autosuggestions", as:plugin, from:github
zplug "zsh-users/zsh-syntax-highlighting", as:plugin, from:github

# Libraries to load from oh-my-zsh
omzsh_libs=("misc" "key-bindings" "history" "completion" "clipboard")
for omzsh_lib in "${omzsh_libs[@]}"; do
  zplug "lib/$omzsh_lib", from:oh-my-zsh
done

# Plugins to load from oh-my-zsh
omzsh_plugins=("tmux" "asdf" "kubectl" "fzf" "git" "termsupport")
for omzsh_plugin in "${omzsh_plugins[@]}"; do
  zplug "plugins/$omzsh_plugin", from:oh-my-zsh
done

zplug "jackharrisonsherlock/common", as:theme, from:github

# Install all the things
if ! zplug check; then
  zplug install
fi

zplug load || echo "Help: Run 'zplug load --verbose for more information"

### BEGIN MY MODIFICATIONS

# custom prompt
PROMPT="%{$fg[cyan]%}日本 $PROMPT"

# general aliases
alias kg='k get'
alias kd='k describe'
alias kdel='k delete'

# fix kubectl aliases
source <(kubectl completion zsh)

# cat -> bat, syntax highlighting
if command -v bat >/dev/null 2>&1 || command -v batcat >/dev/null 2>&1; then
  commandName="bat"
  if command -v batcat >/dev/null 2>&1; then
    commandName="batcat"

    # nice to have, alias bat to batcat
    alias bat="$commandName"
  fi
  alias cat="$commandName --tabs 2"
fi

# Replace ls with a better version ;)
if command -v lsd >/dev/null 2>&1; then
  alias ls='lsd --group-dirs first'
fi

# Go
export GOPATH="$HOME/go"
